# bot.py
import os
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from .ai_processing import VectorDatabase

logger = logging.getLogger(__name__)

class CourseBot:
    def __init__(self):
        self.token = '7884948980:AAFSmEjRYMvE-tgv82wWquqd2v0_L6C-Pd8'
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        self.user_states = {}
        self.vector_db = VectorDatabase()
        self._register_handlers()

    def _register_handlers(self):
        self.dp.message.register(self.start_handler, Command("start"))
        self.dp.message.register(self.help_handler, Command("help"))
        self.dp.message.register(self.list_courses_handler, Command("courses"))
        self.dp.message.register(self.ask_handler, Command("ask"))
        self.dp.message.register(self.process_question)
        self.dp.callback_query.register(self.course_callback_handler, lambda c: c.data.startswith('course_'))
        self.dp.callback_query.register(self.materials_callback_handler, lambda c: c.data.startswith('materials_'))
        self.dp.callback_query.register(self.ask_course_callback_handler, lambda c: c.data.startswith('ask_course_'))
        self.dp.callback_query.register(self.after_question_callback_handler, lambda c: c.data == 'end_dialog')

    # –ò—Å—Ö–æ–¥–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    def _register_handlers(self):
        self.dp.message.register(self.start_handler, Command("start"))
        self.dp.message.register(self.help_handler, Command("help"))
        self.dp.message.register(self.list_courses_handler, Command("courses"))
        self.dp.message.register(self.ask_handler, Command("ask"))
        self.dp.message.register(self.process_question)
        self.dp.callback_query.register(self.course_callback_handler, lambda c: c.data.startswith('course_'))
        self.dp.callback_query.register(self.materials_callback_handler, lambda c: c.data.startswith('materials_'))
        self.dp.callback_query.register(self.ask_course_callback_handler, lambda c: c.data.startswith('ask_course_'))
        self.dp.callback_query.register(self.after_question_callback_handler, lambda c: c.data == 'end_dialog')

    async def start_handler(self, message: types.Message):
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
            "/auth - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
            "/courses - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤\n"
            "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∫—É—Ä—Å–∞\n"
            "/help - –ü–æ–º–æ—â—å"
        )
        await message.answer(welcome_text)

    async def ask_handler(self, message: types.Message):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìò –ö—É—Ä—Å 1", callback_data="ask_course_1")]
        ])
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å:", reply_markup=keyboard)

    async def ask_course_callback_handler(self, callback: types.CallbackQuery):
        course_id = int(callback.data.split('_')[2])
        self.user_states[callback.from_user.id] = {
            'course_id': course_id,
            'in_dialog': True
        }
        await callback.message.edit_text(
            f"üìù –í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å {course_id}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º. "
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=self._get_dialog_keyboard()
        )
        await callback.answer()

    async def process_question(self, message: types.Message):
        user_id = message.from_user.id
        if not self.user_states.get(user_id, {}).get('in_dialog'):
            return

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å "–ë–æ—Ç –¥—É–º–∞–µ—Ç..."
            thinking_msg = await message.answer("‚è≥ –ò—â—É –æ—Ç–≤–µ—Ç...")
            
            response = self.vector_db.generate_response(message.text)
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await self.bot.delete_message(
                chat_id=message.chat.id,
                message_id=thinking_msg.message_id
            )
            
            await message.answer(
                f"üìö –û—Ç–≤–µ—Ç:\n\n{response}",
                reply_markup=self._get_dialog_keyboard()
            )
            
        except Exception as e:
            logger.error(f"Error: {e}")
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
                reply_markup=self._get_dialog_keyboard()
            )
    
    def _get_dialog_keyboard(self):
        return InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üö´ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", callback_data="end_dialog")]
        ])

    async def after_question_callback_handler(self, callback: types.CallbackQuery):
        user_id = callback.from_user.id
        if user_id in self.user_states:
            del self.user_states[user_id]
        
        await callback.message.edit_text(
            "‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /ask –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.",
            reply_markup=None
        )
        await callback.answer()

    async def list_courses_handler(self, message: types.Message):
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìò –ö—É—Ä—Å 1", callback_data="course_1")]
        ])
        await message.answer("üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—É—Ä—Å—ã:", reply_markup=keyboard)

    async def course_callback_handler(self, callback: types.CallbackQuery):
        course_id = int(callback.data.split('_')[1])
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data=f"materials_{course_id}")]
        ])
        await callback.message.edit_text(f"üìò –ö—É—Ä—Å {course_id}", reply_markup=keyboard)
        await callback.answer()

    async def materials_callback_handler(self, callback: types.CallbackQuery):
        course_id = int(callback.data.split('_')[1])
        await callback.message.edit_text(f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ {course_id}:\n\n1. –õ–µ–∫—Ü–∏—è 1\n2. –ü—Ä–∞–∫—Ç–∏–∫–∞ 1")
        await callback.answer()

    async def after_question_callback_handler(self, callback: types.CallbackQuery):
        await callback.message.edit_text("‚úÖ –î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        await callback.answer()

    async def help_handler(self, message: types.Message):
        help_text = (
            "üîç –°–ø—Ä–∞–≤–∫–∞:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/courses - –°–ø–∏—Å–æ–∫ –∫—É—Ä—Å–æ–≤\n"
            "/ask - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
        await message.answer(help_text)

    async def start_polling(self):
        await self.dp.start_polling(self.bot)

if __name__ == "__main__":
    bot = CourseBot()
    asyncio.run(bot.start_polling())
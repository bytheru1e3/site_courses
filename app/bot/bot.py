import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.models import Course, db, User
from flask import Flask
import requests

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # Set to DEBUG level for more detailed logs

# –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω Replit –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REPLIT_DOMAIN = os.environ.get('REPLIT_DEV_DOMAIN', '')
if not REPLIT_DOMAIN:
    logger.warning("REPLIT_DEV_DOMAIN not found in environment variables")
    API_BASE_URL = 'http://0.0.0.0:5000/api/telegram'
else:
    API_BASE_URL = f'https://{REPLIT_DOMAIN}/api/telegram'

logger.info(f"Using API URL: {API_BASE_URL}")

class CourseBot:
    def __init__(self, app: Flask):
        if not app:
            raise ValueError("Flask application must be provided")

        self.app = app
        self.token = os.environ.get('TELEGRAM_BOT_TOKEN')
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN not found in environment variables")

        # Dictionary to store user's current course selection
        self.user_states = {}

        logger.info("Initializing Telegram bot...")
        self.bot = Bot(token=self.token)
        self.dp = Dispatcher()
        self._register_handlers()
        logger.info("Bot handlers registered successfully")

    def _register_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        try:
            self.dp.message.register(self.start_handler, Command("start"))
            self.dp.message.register(self.register_handler, Command("register"))
            self.dp.message.register(self.auth_handler, Command("auth"))
            self.dp.message.register(self.list_courses_handler, Command("courses"))
            self.dp.message.register(self.help_handler, Command("help"))
            self.dp.message.register(self.chat_handler, Command("chat"))
            self.dp.callback_query.register(
                self.course_callback_handler,
                lambda c: c.data.startswith('course_')
            )
            self.dp.callback_query.register(
                self.materials_callback_handler,
                lambda c: c.data.startswith('materials_')
            )
            self.dp.callback_query.register(
                self.chat_course_callback_handler,
                lambda c: c.data.startswith('chat_course_')
            )
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            self.dp.message.register(self.handle_message)
        except Exception as e:
            logger.error(f"Error registering handlers: {e}", exc_info=True)
            raise

    async def start_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            logger.info(f"Start command received from user {message.from_user.id}")
            welcome_text = (
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞–º–∏!\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/register - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                "/auth - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "/courses - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤\n"
                "/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
                "/help - –ü–æ–º–æ—â—å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            )
            await self.bot.send_message(chat_id=message.chat.id, text=welcome_text)
        except Exception as e:
            logger.error(f"Error in start handler: {e}", exc_info=True)
            await self.bot.send_message(chat_id=message.chat.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def register_handler(self, message: types.Message):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        try:
            logger.info(f"Register command received from user {message.from_user.id}")
            if len(message.text.split()) < 2:
                await message.reply("–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /register <email>")
                return

            email = message.text.split(maxsplit=1)[1]
            data = {
                "telegram_id": str(message.from_user.id),  # Convert to string for JSON
                "username": message.from_user.username or message.from_user.first_name,
                "email": email
            }

            logger.info(f"Sending registration request to API: {API_BASE_URL}/register")
            try:
                response = requests.post(f"{API_BASE_URL}/register", json=data, timeout=10)
                response_data = response.json()

                if response_data.get("success"):
                    await message.reply("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error_msg}")
            except requests.exceptions.RequestException as e:
                logger.error(f"API request failed: {str(e)}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.error(f"Error in register handler: {e}", exc_info=True)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

    async def auth_handler(self, message: types.Message):
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API"""
        try:
            logger.info(f"Auth command received from user {message.from_user.id}")
            data = {"telegram_id": str(message.from_user.id)}  # Convert to string for JSON

            logger.info(f"Sending auth request to API: {API_BASE_URL}/auth")
            try:
                response = requests.post(f"{API_BASE_URL}/auth", json=data, timeout=10)
                response_data = response.json()

                if response_data.get("success"):
                    user = response_data.get("user")
                    await message.reply(f"‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ {user['username']} ({user['email']})")
                else:
                    error_msg = response_data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
                    await message.reply(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {error_msg}")
            except requests.exceptions.RequestException as e:
                logger.error(f"API request failed: {str(e)}")
                await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except Exception as e:
            logger.error(f"Error in auth handler: {e}", exc_info=True)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É")

    async def chat_handler(self, message: types.Message):
        """Handler for /chat command"""
        try:
            logger.debug(f"Chat command received from user {message.from_user.id}")
            with self.app.app_context():
                courses = Course.query.all()
                logger.debug(f"Found {len(courses)} courses")

                if not courses:
                    await message.reply("üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üìò {course.title}",
                        callback_data=f"chat_course_{course.id}"
                    )]
                    for course in courses
                ])

                await message.reply(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=keyboard
                )
                logger.debug(f"Sent course selection keyboard to user {message.from_user.id}")

        except Exception as e:
            logger.error(f"Error in chat handler: {str(e)}", exc_info=True)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–∞—Ç–∞")

    async def chat_course_callback_handler(self, callback_query: types.CallbackQuery):
        """Handler for course selection in chat"""
        try:
            user_id = callback_query.from_user.id
            course_id = int(callback_query.data.split('_')[2])
            logger.debug(f"User {user_id} selected course {course_id} for chat")

            # Save selected course in user state
            self.user_states[user_id] = {'selected_course': course_id}

            with self.app.app_context():
                course = Course.query.get(course_id)
                if not course:
                    logger.error(f"Course {course_id} not found")
                    await callback_query.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                await self.bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫—É—Ä—Å: {course.title}\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."
                )
                await callback_query.answer()
                logger.debug(f"Course {course_id} selected successfully for user {user_id}")

        except Exception as e:
            logger.error(f"Error in chat course callback handler: {str(e)}", exc_info=True)
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞")

    async def handle_message(self, message: types.Message):
        """Handler for text messages"""
        try:
            # Skip commands
            if message.text.startswith('/'):
                return

            user_id = message.from_user.id
            user_state = self.user_states.get(user_id)
            logger.debug(f"Processing message from user {user_id}, state: {user_state}")

            # If user hasn't selected a course, ignore the message
            if not user_state or 'selected_course' not in user_state:
                logger.debug(f"User {user_id} has not selected a course yet")
                return

            course_id = user_state['selected_course']
            logger.debug(f"Processing question for course {course_id} from user {user_id}")

            # Here will be AI processing logic
            # For now, return a test response
            response = {
                'success': True,
                'answer': f"–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: '{message.text}'\n–ü–æ –∫—É—Ä—Å—É —Å ID: {course_id}"
            }

            await message.reply(response['answer'])
            logger.debug(f"Sent answer to user {user_id}")

        except Exception as e:
            logger.error(f"Error handling message: {str(e)}", exc_info=True)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞")

    async def help_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_text = (
                "üîç –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                "1Ô∏è‚É£ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                "2Ô∏è‚É£ /register <email> - –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\n"
                "3Ô∏è‚É£ /auth - –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É\n"
                "4Ô∏è‚É£ /courses - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤\n"
                "5Ô∏è‚É£ /chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º\n"
                "6Ô∏è‚É£ /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
                "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
                "üìö –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞\n"
                "üí¨ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º\n"
                "üìù –ü–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"
            )
            await message.reply(help_text)
        except Exception as e:
            logger.error(f"Error in help handler: {e}", exc_info=True)
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

    async def list_courses_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /courses"""
        try:
            logger.info(f"Courses command received from user {message.from_user.id}")
            with self.app.app_context():
                courses = Course.query.all()
                logger.info(f"Found {len(courses)} courses")

                if not courses:
                    await self.bot.send_message(chat_id=message.chat.id, text="üìö –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
                    return

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text=f"üìò {course.title}",
                        callback_data=f"course_{course.id}"
                    )]
                    for course in courses
                ])

                await self.bot.send_message(
                    chat_id=message.chat.id,
                    text="üìö –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:",
                    reply_markup=keyboard
                )
        except Exception as e:
            logger.error(f"Error in list_courses_handler: {e}", exc_info=True)
            await self.bot.send_message(chat_id=message.chat.id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫—É—Ä—Å–æ–≤")

    async def course_callback_handler(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
        try:
            logger.info(f"Course callback received from user {callback_query.from_user.id}")
            with self.app.app_context():
                course_id = int(callback_query.data.split('_')[1])
                course = Course.query.get(course_id)

                if not course:
                    logger.warning(f"Course {course_id} not found")
                    await callback_query.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                course_info = (
                    f"üìò *{course.title}*\n"
                    f"üìù {course.description or '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n"
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìö –ü–æ–∫–∞–∑–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã",
                        callback_data=f"materials_{course_id}"
                    )
                ]])

                await self.bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=course_info,
                    parse_mode="Markdown",
                    reply_markup=keyboard
                )
                await callback_query.answer()

        except Exception as e:
            logger.error(f"Error in course_callback_handler: {e}", exc_info=True)
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ")

    async def materials_callback_handler(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞"""
        try:
            logger.info(f"Materials callback received from user {callback_query.from_user.id}")
            with self.app.app_context():
                course_id = int(callback_query.data.split('_')[1])
                course = Course.query.get(course_id)

                if not course:
                    logger.warning(f"Course {course_id} not found")
                    await callback_query.answer("‚ùå –ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return

                materials = course.materials
                if not materials:
                    await self.bot.send_message(
                        chat_id=callback_query.message.chat.id,
                        text=f"üìö –í –∫—É—Ä—Å–µ *{course.title}* –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤.",
                        parse_mode="Markdown"
                    )
                    await callback_query.answer()
                    return

                materials_text = f"üìö –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –∫—É—Ä—Å–∞ *{course.title}*:\n\n"
                for material in materials:
                    materials_text += (
                        f"üìë *{material.title}*\n"
                        f"‚îî {material.content[:100]}{'...' if len(material.content) > 100 else ''}\n\n"
                    )

                await self.bot.send_message(
                    chat_id=callback_query.message.chat.id,
                    text=materials_text,
                    parse_mode="Markdown"
                )
                await callback_query.answer()

        except Exception as e:
            logger.error(f"Error in materials_callback_handler: {e}", exc_info=True)
            await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –∫—É—Ä—Å–∞")

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting Telegram bot polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error starting Telegram bot: {e}", exc_info=True)
            raise
import os
import logging
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio

logger = logging.getLogger(__name__)

class CourseBot:
    def __init__(self, token, api_url):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.api_url = api_url

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.dp.message.register(self.start_handler, Command("start"))
        self.dp.callback_query.register(self.handle_course_callback, F.data.startswith("course:"))

    async def start_handler(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            response = requests.get(f"{self.api_url}/api/courses")
            data = response.json()

            if not data.get('success'):
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return

            courses = data.get('courses', [])
            if not courses:
                await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.")
                return

            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(
                    text=course['title'],
                    callback_data=f"course:{course['id']}"
                )]
                for course in courses
            ])

            await message.answer(
                "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—Å–æ–≤:",
                reply_markup=keyboard
            )

        except Exception as e:
            logger.error(f"Error in start_handler: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤.")

    async def handle_course_callback(self, callback_query: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞"""
        try:
            course_id = int(callback_query.data.split(":")[1])
            response = requests.get(f"{self.api_url}/api/courses/{course_id}")
            data = response.json()

            if not data.get('success'):
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")
                return

            course = data.get('course', {})
            course_info = (
                f"üìö *{course['title']}*\n\n"
                f"üìù {course['description']}\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:\n"
            )

            for material in course.get('materials', []):
                course_info += f"- {material['title']}\n"

            await callback_query.message.answer(
                course_info,
                parse_mode="Markdown"
            )
            await callback_query.answer()

        except Exception as e:
            logger.error(f"Error in handle_course_callback: {e}")
            await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫—É—Ä—Å–µ.")
            await callback_query.answer()

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info("Starting bot polling...")
            await self.dp.start_polling(self.bot)
        except Exception as e:
            logger.error(f"Error starting bot: {e}")
